name: CI/CD Pipeline

on: 
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libglib2.0-0 \
            libsm6 \
            libxext6 \
            libxrender-dev \
            libgomp1 \
            libgl1-mesa-dev \
            libgstreamer1.0-dev \
            libgstreamer-plugins-base1.0-dev \
            python3-opencv \
            ffmpeg
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8
          
      - name: Add project to Python path
        run: |
          echo "PYTHONPATH=$PYTHONPATH:$(pwd)" >> $GITHUB_ENV
          
      - name: Setup test dataset with COCO images
        run: |
          mkdir -p data/samples
          python -c "
          import sys
          sys.path.append('.')
          from src.utils.coco_utils import setup_test_dataset
          import os
          
          print('Setting up test dataset...')
          try:
              images_dir, annotations_file = setup_test_dataset('data/samples')
              print(f'Test dataset created at: {images_dir}')
              print(f'Annotations file: {annotations_file}')
              
              # List created files
              files = os.listdir('data/samples')
              print(f'Created files: {files}')
              
              # Verify files exist
              test_files = ['coco_sample_1.jpg', 'coco_sample_2.jpg', 'coco_sample_3.jpg']
              for test_file in test_files:
                  filepath = f'data/samples/{test_file}'
                  if os.path.exists(filepath):
                      print(f'✓ {test_file} exists')
                  else:
                      print(f'✗ {test_file} missing - checking for synthetic images')
                      
              # Check for synthetic images as fallback
              synthetic_files = [f for f in files if f.startswith('synthetic_')]
              if synthetic_files:
                  print(f'Found synthetic images: {synthetic_files}')
              
          except Exception as e:
              print(f'Error setting up test dataset: {e}')
              import traceback
              traceback.print_exc()
              
              # Create minimal fallback dataset
              print('Creating minimal fallback dataset...')
              import cv2
              import numpy as np
              
              # Create a more realistic test image with visible objects
              img = np.zeros((480, 640, 3), dtype=np.uint8)
              img[:] = (100, 150, 200)  # Blue background
              
              # Draw person-like shape
              cv2.rectangle(img, (250, 150), (350, 400), (139, 69, 19), -1)  # Body
              cv2.circle(img, (300, 130), 25, (255, 220, 177), -1)  # Head
              
              # Draw car-like shape
              cv2.rectangle(img, (450, 350), (600, 420), (0, 0, 255), -1)  # Car body
              cv2.circle(img, (470, 410), 15, (0, 0, 0), -1)  # Wheel 1
              cv2.circle(img, (580, 410), 15, (0, 0, 0), -1)  # Wheel 2
              
              cv2.imwrite('data/samples/test_image.jpg', img)
              cv2.imwrite('data/samples/pose_sample.jpg', img)
              print('✓ Fallback test images created')
          "
          
      - name: Verify test data
        run: |
          ls -la data/samples/
          python -c "
          import cv2
          import os
          
          # Check if test images are readable and not empty
          test_files = ['test_image.jpg', 'pose_sample.jpg']
          for filename in test_files:
              filepath = f'data/samples/{filename}'
              if os.path.exists(filepath):
                  img = cv2.imread(filepath)
                  if img is not None:
                      print(f'✓ {filename}: {img.shape} - Valid image')
                  else:
                      print(f'✗ {filename}: Failed to load')
              else:
                  print(f'✗ {filename}: File not found')
          "
          
      - name: Run linting
        run: |
          flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
          
      - name: Run tests with coverage
        run: |
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  build-docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Build Docker image
        run: |
          docker build -t visionflow:latest .
          
      - name: Test Docker container
        run: |
          docker run --rm visionflow:latest python -c "import src.detection.yolo_wrapper; print('Docker build successful')"

  deploy:
    runs-on: ubuntu-latest
    needs: [test, build-docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your deployment commands here
